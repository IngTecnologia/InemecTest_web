"""
Aplicaci√≥n principal InemecTest - Versi√≥n simplificada basada en Excel
"""

from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import os
from pathlib import Path
from datetime import datetime
import logging

# Importar m√≥dulos locales
from src.config import API_CONFIG, validate_config, ensure_data_directory
from src.models import HealthCheck, APIResponse
from src.api import router
from src.admin.api import admin_router  # ‚Üê L√çNEA AGREGADA
from src.excel_handler import ExcelHandler

# Validar configuraci√≥n al iniciar
print("üöÄ Iniciando InemecTest...")
if not validate_config():
    print("‚ùå Error en configuraci√≥n. Deteniendo aplicaci√≥n.")
    exit(1)

# Crear aplicaci√≥n FastAPI
app = FastAPI(
    title=API_CONFIG["title"],
    description=API_CONFIG["description"],
    version=API_CONFIG["version"],
    docs_url="/docs",
    redoc_url="/redoc"
)

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Middleware para logging de requests
@app.middleware("http")
async def log_requests(request: Request, call_next):
    start_time = datetime.now()
    logger.info(f"üåê {request.method} {request.url} - Cliente: {request.client.host}")
    
    response = await call_next(request)
    
    process_time = (datetime.now() - start_time).total_seconds()
    logger.info(f"‚úÖ {request.method} {request.url} - Status: {response.status_code} - Tiempo: {process_time:.2f}s")
    
    return response

# Configurar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=API_CONFIG["cors_origins"],
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS", "PATCH"],
    allow_headers=["*"],
)

# Incluir rutas de la API
app.include_router(router, prefix="/api/v1", tags=["InemecTest API"])
app.include_router(admin_router, prefix="/api/v1", tags=["Admin Module"])  # ‚Üê L√çNEA AGREGADA

# Inicializar handler de Excel
excel_handler = ExcelHandler()

# =============================================================================
# EVENTOS DE STARTUP Y SHUTDOWN
# =============================================================================

@app.on_event("startup")
async def startup_event():
    """Inicializar aplicaci√≥n"""
    try:
        print("üìÅ Verificando directorios...")
        ensure_data_directory()
        
        # ‚Üê AGREGAR: Verificar m√≥dulo admin
        admin_enabled = os.getenv("ADMIN_ENABLED", "false").lower() == "true"
        if admin_enabled:
            print("üîß M√≥dulo admin habilitado")
            # Crear directorios admin si no existen
            admin_dirs = [
                "data/procedures_source",
                "data/admin_tracking", 
                "data/admin_backups",
                "logs"
            ]
            for dir_path in admin_dirs:
                Path(dir_path).mkdir(parents=True, exist_ok=True)
            
            # Verificar API key de OpenAI
            from src.admin.config import get_openai_api_key
            if get_openai_api_key():
                print("‚úÖ OpenAI API Key configurado")
            else:
                print("‚ö†Ô∏è OpenAI API Key no configurado - funcionalidad limitada")
        else:
            print("‚ö†Ô∏è M√≥dulo admin deshabilitado")
        
        print("üìä Validando archivos Excel...")
        validation_result = await excel_handler.validate_data_file()
        
        if validation_result["exists"] and validation_result["valid"]:
            print(f"‚úÖ Archivo de datos v√°lido: {validation_result['procedures_count']} procedimientos, {validation_result['questions_count']} preguntas")
        else:
            print("‚ö†Ô∏è Archivo de datos no encontrado o inv√°lido")
            if validation_result["errors"]:
                for error in validation_result["errors"]:
                    print(f"   - {error}")
            print("üìù Por favor, aseg√∫rese de que el archivo Excel est√© en la ubicaci√≥n correcta")
        
        # Verificar archivo de resultados
        if excel_handler.results_file.exists():
            evaluations = await excel_handler.get_all_evaluations()
            print(f"üìà Archivo de resultados encontrado: {len(evaluations)} evaluaciones")
        else:
            print("üìÑ Archivo de resultados ser√° creado autom√°ticamente")
        
        print("‚úÖ InemecTest iniciado correctamente")
        print(f"üåê API disponible en: http://{API_CONFIG['host']}:{API_CONFIG['port']}")
        print(f"üìö Documentaci√≥n en: http://{API_CONFIG['host']}:{API_CONFIG['port']}/docs")
        if admin_enabled:
            print(f"üîß Admin disponible en: http://{API_CONFIG['host']}:{API_CONFIG['port']}/admin")
        
    except Exception as e:
        print(f"‚ùå Error durante startup: {e}")

@app.on_event("shutdown")
async def shutdown_event():
    """Cleanup al cerrar aplicaci√≥n"""
    print("üîÑ Cerrando InemecTest...")
    print("‚úÖ Aplicaci√≥n cerrada correctamente")

# =============================================================================
# ENDPOINTS PRINCIPALES
# =============================================================================

@app.get("/", tags=["General"])
async def root():
    """Endpoint ra√≠z de la API"""
    return APIResponse(
        success=True,
        message="InemecTest API est√° funcionando",
        data={
            "version": API_CONFIG["version"],
            "timestamp": datetime.now().isoformat(),
            "docs": "/docs",
            "status": "active"
        }
    )

@app.get("/health", response_model=HealthCheck, tags=["General"])
async def health_check():
    """Verificar estado de salud completo de la API"""
    try:
        # Verificar archivos Excel
        data_validation = await excel_handler.validate_data_file()
        results_file_exists = excel_handler.results_file.exists()
        
        excel_files_status = {
            "data_file_exists": data_validation["exists"],
            "data_file_valid": data_validation["valid"],
            "results_file_exists": results_file_exists,
            "procedures_count": data_validation.get("procedures_count", 0),
            "questions_count": data_validation.get("questions_count", 0)
        }
        
        # Determinar estado general
        if data_validation["exists"] and data_validation["valid"]:
            overall_status = "healthy"
        elif data_validation["exists"]:
            overall_status = "warning"
        else:
            overall_status = "error"
        
        return HealthCheck(
            status=overall_status,
            excel_files=excel_files_status,
            timestamp=datetime.now().isoformat()
        )
        
    except Exception as e:
        return JSONResponse(
            status_code=503,
            content={
                "status": "unhealthy",
                "excel_files": {
                    "data_file_exists": False,
                    "data_file_valid": False,
                    "results_file_exists": False
                },
                "timestamp": datetime.now().isoformat(),
                "error": str(e)
            }
        )

@app.get("/info", tags=["General"])
async def get_system_info():
    """Obtener informaci√≥n general del sistema"""
    try:
        # Informaci√≥n de archivos
        data_validation = await excel_handler.validate_data_file()
        
        # Estad√≠sticas b√°sicas si hay archivo de resultados
        evaluations = []
        procedure_stats = []
        if excel_handler.results_file.exists():
            evaluations = await excel_handler.get_all_evaluations()
            procedure_stats = await excel_handler.get_procedure_statistics()
        
        return APIResponse(
            success=True,
            message="Informaci√≥n del sistema obtenida",
            data={
                "system": {
                    "name": "InemecTest",
                    "version": API_CONFIG["version"],
                    "mode": "Excel-based"
                },
                "data": {
                    "procedures_available": data_validation.get("procedures_count", 0),
                    "questions_available": data_validation.get("questions_count", 0),
                    "total_evaluations": len(evaluations),
                    "data_file_status": "valid" if data_validation["valid"] else "invalid"
                },
                "files": {
                    "data_file": str(excel_handler.data_file),
                    "results_file": str(excel_handler.results_file)
                },
                "top_procedures": procedure_stats[:5] if procedure_stats else []
            }
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error obteniendo informaci√≥n del sistema: {str(e)}")

# =============================================================================
# MANEJO DE ERRORES
# =============================================================================

@app.exception_handler(404)
async def not_found_handler(request, exc):
    """Manejador para errores 404"""
    return JSONResponse(
        status_code=404,
        content={
            "success": False,
            "message": "Recurso no encontrado",
            "error_code": "NOT_FOUND",
            "timestamp": datetime.now().isoformat()
        }
    )

@app.exception_handler(500)
async def internal_server_error_handler(request, exc):
    """Manejador para errores 500"""
    return JSONResponse(
        status_code=500,
        content={
            "success": False,
            "message": "Error interno del servidor",
            "error_code": "INTERNAL_ERROR",
            "timestamp": datetime.now().isoformat()
        }
    )

@app.exception_handler(HTTPException)
async def http_exception_handler(request, exc):
    """Manejador para HTTPExceptions"""
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "success": False,
            "message": exc.detail,
            "error_code": f"HTTP_{exc.status_code}",
            "timestamp": datetime.now().isoformat()
        }
    )

# =============================================================================
# FUNCI√ìN PRINCIPAL
# =============================================================================

if __name__ == "__main__":
    import uvicorn
    
    print(f"üöÄ Iniciando servidor en {API_CONFIG['host']}:{API_CONFIG['port']}")
    
    uvicorn.run(
        "main:app",
        host=API_CONFIG["host"],
        port=API_CONFIG["port"],
        reload=True,
        log_level="info"
    )
